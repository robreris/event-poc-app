AWSTemplateFormatVersion: '2010-09-09'
Description: Windows EC2 Auto Scaling Group for PowerPoint Rendering Agent

Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Pre-baked Windows AMI with PowerPoint and agent.py
  InstanceType:
    Type: String
    Default: t3.large
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  EFSFileSystemId:
    Type: String
  ClusterName:
    Type: String

Resources:
  RenderAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-RenderAgentRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: RenderAgentAppPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: "*"
              - Effect: Allow
                Action: 
                  - ecs:DescribeInstances
                Resource: "*"

  RenderAgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-RenderAgentInstanceProfile"
      Path: /
      Roles:
        - !Ref RenderAgentRole
  RenderLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: windows-render-agent-template
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref SubnetId
            Groups:
              - !Ref SecurityGroupId
        IamInstanceProfile:
          Name: !Ref RenderAgentInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            <powershell>
            # Install AWS CLI v2
            Invoke-WebRequest -Uri https://awscli.amazonaws.com/AWSCLIV2.msi -OutFile awscliv2.msi
            Start-Process msiexec.exe -ArgumentList '/i awscliv2.msi /quiet' -Wait
            Remove-Item awscliv2.msi

            # Install latest python for Windows
            $pythonInstaller = "python-installer.exe"
            Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.12.3/python-3.12.3-amd64.exe" -OutFile $pythonInstaller
            Start-Process .\$pythonInstaller -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1' -Wait
            Remove-Item $pythonInstaller
            $env:Path += ";C:\Program Files\Python312\Scripts"
            pip install pika pywin32
      
            # Download Office Deployment Tool (ODT) to C:\odt
            New-Item -Path "C:\odt" -ItemType Directory -Force | Out-Null
            Invoke-WebRequest -Uri "https://download.microsoft.com/download/6c1eeb25-cf8b-41d9-8d0d-cc1dbc032140/officedeploymenttool_18827-20140.exe" -OutFile "C:\odt\OfficeDeploymentTool.exe"
            Start-Process "C:\odt\OfficeDeploymentTool.exe" -ArgumentList "/extract:C:\odt /quiet" -Wait

            # custom xml configuration for ODT
            $odtConfig = @"
            <Configuration>
              <Add OfficeClientEdition="64" Channel="MonthlyEnterprise">
                <Product ID="O365BusinessRetail">
                  <Language ID="en-us" />
                  <ExcludeApp ID="Access"/>
                  <ExcludeApp ID="Excel"/>
                  <ExcludeApp ID="OneNote"/>
                  <ExcludeApp ID="Outlook"/>
                  <ExcludeApp ID="Publisher"/>
                  <ExcludeApp ID="Teams"/>
                  <ExcludeApp ID="Word"/>
                </Product>
              </Add>
              <Display Level="None" AcceptEULA="TRUE"/>
              <Property Name="AUTOACTIVATE" Value="1"/>
            </Configuration>
            "@
            $odtConfig | Out-File -FilePath "C:\odt\config.xml" -Encoding UTF8     

            # Run ODT to install just PowerPoint
            Start-Process "C:\odt\setup.exe" -ArgumentList "/configure C:\odt\config.xml" -Wait

            # Mount NFS share to Z:
            Install-WindowsFeature NFS-Client
            New-Item -Path "Z:\" -ItemType Directory -Force | Out-Null
            $efsDns = "${EFSFileSystemId}.efs.${AWS::Region}.amazonaws.com"
            mount -o anon \\$efsDns\ Z:

            # Set up RabbitMQ
            $region = "${AWS::Region}"
            $rabbitmqhost = aws ssm get-parameter --name "/${ClusterName}/rabbithost" --region $region --query 'Parameter.Value' --output text
            $rabbitmqusername = aws ssm get-parameter --name "/${ClusterName}/rabbitusername" --region $region --query 'Parameter.Value' --output text
            $rabbitmqpassword = aws ssm get-parameter --name "/${ClusterName}/rabbitpassword" --region $region --query 'Parameter.Value' --output text

            [System.Environment]::SetEnvironmentVariable("RABBITMQ_HOST", $rabbitmqhost, "Machine")
            [System.Environment]::SetEnvironmentVariable("RABBITMQ_USER", $rabbitmqusername, "Machine")
            [System.Environment]::SetEnvironmentVariable("RABBITMQ_PASS", $rabbitmqpassword, "Machine")

            # Prepare working directory for agent and download agent.py from GitHub
            New-Item -Path "C:\render-agent" -ItemType Directory -Force | Out-Null
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/robreris/event-poc-app/refs/heads/main/eks/v2/windows-ppt/windows-agent-setup.py" -OutFile "C:\render-agent\agent.py"

            # Create start.bat to run agent.py
            "python C:\render-agent\agent.py" | Out-File -FilePath "C:\render-agent\start.bat" -Encoding ASCII

            # Schedule task to run agent on system startup
            schtasks /Create /TN "RenderAgent" /TR "C:\render-agent\start.bat" /SC ONSTART /RU SYSTEM /RL HIGHEST

            </powershell>

  RenderAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref RenderLaunchTemplate
        Version: !GetAtt RenderLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: windows-render-agent
          PropagateAtLaunch: true

Outputs:
  LaunchTemplateId:
    Value: !Ref RenderLaunchTemplate

  AutoScalingGroupName:
    Value: !Ref RenderAutoScalingGroup
